[tool:pytest]
# PyTest Configuration for TDD London School Testing

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Coverage settings
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-report=term-missing
    --cov-fail-under=90
    --benchmark-only
    --benchmark-sort=mean

# Custom markers for TDD London School testing
markers =
    london_school: TDD London School (mockist) tests
    unit: Unit tests with complete isolation
    integration: Integration tests with limited mocking
    contract: Contract testing between components
    behavior: Behavior verification tests
    performance: Performance and benchmark tests
    slow: Slow running tests (longer than 1 second)
    network: Tests requiring network access
    database: Tests requiring database
    ai_service: Tests requiring AI service mocking

# Async testing configuration
asyncio_mode = auto

# Test output configuration
console_output_style = progress
junit_family = xunit2

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */virtualenv/*
    */__pycache__/*
    */migrations/*
    */node_modules/*
    */static/*
    setup.py
    manage.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\b.*\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

# Benchmark configuration for performance tests
[benchmark]
min_rounds = 5
max_time = 1.0
min_time = 0.000005
sort = mean
histogram = true