# Security-Hardened Dockerfile for Claude-TUI Production Deployment
# Implements comprehensive container security best practices
# Author: Security Specialist - Hive Mind Team
# Date: 2025-08-26

# Stage 1: Secure Builder - Minimal attack surface with security scanning
FROM python:3.11-slim as secure-builder

# Security: Set non-interactive mode to prevent hanging on prompts
ENV DEBIAN_FRONTEND=noninteractive

# Security: Update packages and install minimal build dependencies with specific versions
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential=12.* \
    curl=7.* \
    git=1:2.* \
    gcc=4:11.* \
    g++=4:11.* \
    make=4.* \
    pkg-config=0.* \
    libffi-dev=3.* \
    libssl-dev=3.* \
    ca-certificates=* \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* /var/tmp/* \
    && apt-get autoremove -y

# Install Node.js LTS with integrity verification
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs=20.* \
    && rm -rf /var/lib/apt/lists/* \
    && npm install -g npm@latest \
    && npm cache clean --force

WORKDIR /build

# Copy only necessary files for dependency resolution
COPY pyproject.toml setup.py requirements*.txt ./

# Security: Build Python wheels with integrity checks and no cache
RUN pip install --no-cache-dir --upgrade pip==24.* wheel==0.44.* setuptools==75.* \
    && pip wheel --no-cache-dir --no-deps --wheel-dir /build/wheels -r requirements.txt

# Verify wheel integrity
RUN ls -la /build/wheels/ && echo "Wheels built successfully"

# Stage 2: Security Scanner - Scan dependencies for vulnerabilities
FROM python:3.11-slim as security-scanner

# Install security scanning tools
RUN pip install --no-cache-dir safety==3.* bandit==1.* pip-audit==2.*

COPY --from=secure-builder /build/wheels /build/wheels
COPY requirements.txt /build/

# Run security scans
RUN cd /build && \
    echo "Running security scans..." && \
    safety check --json --output /build/safety-report.json || true && \
    pip-audit --format=json --output=/build/pip-audit-report.json . || true && \
    echo "Security scans completed"

# Stage 3: Runtime Base - Hardened production runtime
FROM python:3.11-slim as runtime-base

# Security: Set non-interactive mode
ENV DEBIAN_FRONTEND=noninteractive

# Security: Create non-privileged user with locked password
RUN groupadd -r -g 10001 appuser \
    && useradd -r -u 10001 -g appuser -d /app -m -s /bin/bash appuser \
    && passwd -l appuser

# Install only essential runtime dependencies with version pinning
RUN apt-get update && apt-get install -y --no-install-recommends \
    git=1:2.* \
    nodejs=18.* \
    npm=8.* \
    curl=7.* \
    ca-certificates=* \
    dumb-init=1.* \
    tini=0.* \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y \
    && rm -rf /tmp/* /var/tmp/*

# Security: Remove unnecessary packages and files
RUN apt-get purge -y --auto-remove \
    && rm -rf /usr/share/doc/* \
    && rm -rf /usr/share/man/* \
    && rm -rf /usr/share/info/* \
    && rm -rf /var/cache/debconf/* \
    && rm -rf /var/log/*

# Security: Remove setuid/setgid binaries to prevent privilege escalation
RUN find /usr -type f -perm /6000 -delete 2>/dev/null || true \
    && find /bin -type f -perm /6000 -delete 2>/dev/null || true \
    && find /sbin -type f -perm /6000 -delete 2>/dev/null || true

# Security: Create secure application directory structure
RUN mkdir -p /app/src /app/config /app/data /app/logs /app/secure-temp /app/secrets \
    && chown -R appuser:appuser /app \
    && chmod -R 750 /app \
    && chmod 700 /app/secrets /app/secure-temp

WORKDIR /app

# Copy and install Python dependencies from builder
COPY --from=secure-builder /build/wheels /tmp/wheels
COPY --chown=appuser:appuser requirements.txt ./

# Security: Install dependencies with hash verification and no cache
RUN pip install --no-cache-dir --upgrade pip==24.* \
    && pip install --no-cache-dir --find-links /tmp/wheels --no-index -r requirements.txt \
    && rm -rf /tmp/wheels /root/.cache/pip \
    && find /usr/local -name "*.pyc" -delete \
    && find /usr/local -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# Install Claude Flow with specific version and integrity verification
RUN npm install -g claude-flow@alpha --production --audit \
    && npm cache clean --force \
    && rm -rf ~/.npm

# Copy application source with proper ownership
COPY --chown=appuser:appuser src/ ./src/
COPY --chown=appuser:appuser pyproject.toml setup.py ./
COPY --chown=appuser:appuser config/ ./config/

# Install the application in production mode
RUN pip install --no-deps --no-cache-dir -e . \
    && python -m compileall src/ -q

# Security: Switch to non-root user
USER appuser

# Security: Create application directories with proper permissions
RUN mkdir -p .swarm logs data backups coordination memory \
    && chmod 750 .swarm logs data backups coordination memory

# Security: Set secure file permissions
RUN find /app -type f -name "*.py" -exec chmod 640 {} \; \
    && find /app -type d -exec chmod 750 {} \;

# Security: Comprehensive health check with timeout
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD python -c "import claude_tui; print('Health check passed')" || exit 1

# Security: Set secure environment variables
ENV PYTHONPATH=/app/src \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    CLAUDE_TUI_ENV=production \
    CLAUDE_TUI_CONFIG_DIR=/app/config \
    CLAUDE_TUI_DATA_DIR=/app/data \
    CLAUDE_TUI_LOG_DIR=/app/logs \
    CLAUDE_TUI_TEMP_DIR=/app/secure-temp \
    TZ=UTC \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    HOME=/app \
    USER=appuser \
    TMPDIR=/app/secure-temp

# Security: Expose only necessary port
EXPOSE 8000

# Security: Set resource limits (can be overridden by runtime)
# These are defaults and should be configured properly in deployment
ENV MAX_MEMORY=512m \
    MAX_CPU_CORES=2

# Security: Use tini as PID 1 for proper signal handling and zombie reaping
ENTRYPOINT ["/usr/bin/tini", "--"]

# Security: Run with restricted capabilities
CMD ["python", "-m", "claude_tui.main", "--production"]

# Stage 4: Development - Extended image with dev tools
FROM runtime-base as development

# Switch back to root for installing dev dependencies
USER root

# Install development dependencies and tools
COPY requirements-dev.txt ./
RUN pip install --no-cache-dir -r requirements-dev.txt

# Install additional development and debugging tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    vim=2:9.* \
    htop=3.* \
    tree=2.* \
    net-tools=1.* \
    procps=2:4.* \
    strace=5.* \
    tcpdump=4.* \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Switch back to appuser
USER appuser

# Development environment variables
ENV CLAUDE_TUI_ENV=development \
    PYTHONDONTWRITEBYTECODE=0 \
    DEBUG=1

# Development command with hot reload
CMD ["python", "-m", "claude_tui.main", "--dev", "--reload"]

# Stage 5: Testing - Image for running tests in CI/CD
FROM development as testing

USER root

# Copy all source code and tests
COPY --chown=appuser:appuser . .

# Install additional test dependencies
RUN pip install --no-cache-dir pytest==8.* pytest-cov==6.* pytest-asyncio==0.24.* pytest-mock==3.*

# Security: Run security tests
RUN bandit -r src/ -f json -o /app/bandit-report.json || true \
    && safety check --json --output /app/safety-report.json || true

USER appuser

# Test environment variables
ENV CLAUDE_TUI_ENV=testing \
    PYTHONPATH=/app/src:/app/tests

# Default test command with security testing
CMD ["python", "-m", "pytest", "tests/", "-v", "--cov=claude_tui", "--cov-report=json", "--cov-report=term"]

# Stage 6: Production with Distroless - Ultra-secure production image
FROM gcr.io/distroless/python3-debian11:latest as production-distroless

# Copy application from runtime-base
COPY --from=runtime-base --chown=10001:10001 /app /app
COPY --from=runtime-base --chown=10001:10001 /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages

# Set working directory
WORKDIR /app

# Run as non-root user
USER 10001:10001

# Security: Set minimal environment variables
ENV PYTHONPATH=/app/src \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    CLAUDE_TUI_ENV=production

# Expose application port
EXPOSE 8000

# Health check (limited in distroless)
HEALTHCHECK --interval=60s --timeout=5s --start-period=60s --retries=2 \
    CMD ["python", "-c", "print('OK')"]

# Run application
ENTRYPOINT ["python", "-m", "claude_tui.main", "--production"]

# Metadata labels for security and compliance
LABEL maintainer="security@claude-tui.com" \
      version="1.0.0" \
      description="Security-hardened Claude-TUI container" \
      security.scan.date="2025-08-26" \
      security.compliance="OWASP,NIST" \
      org.opencontainers.image.source="https://github.com/claude-tui/claude-tui" \
      org.opencontainers.image.vendor="Claude-TUI Security Team" \
      org.opencontainers.image.title="Claude-TUI Security Hardened" \
      org.opencontainers.image.description="Production-ready secure container for Claude-TUI" \
      org.opencontainers.image.licenses="MIT"