name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly security scan

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Analysis
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,security]

      - name: 🎨 Code Formatting Check
        run: |
          black --check --diff src/ tests/
          isort --check-only --diff src/ tests/

      - name: 🔍 Linting
        run: |
          flake8 src/ tests/ --format=github
          mypy src/ --show-error-codes

      - name: 🛡️ Security Scan - Bandit
        run: |
          bandit -r src/ -f sarif -o bandit-results.sarif
        continue-on-error: true

      - name: 📊 Upload Bandit Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-results.sarif

      - name: 🔒 Dependency Security Scan
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: 📋 Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-results.sarif
            safety-report.json

  # Unit and Integration Tests
  test:
    name: 🧪 Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: claude_tui_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 🌐 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git curl

      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,test,performance]

      - name: 🔧 Install Claude Flow
        run: |
          npm install -g claude-flow@alpha

      - name: 🏗️ Setup Test Environment
        run: |
          mkdir -p reports logs data
          python scripts/setup_test_env.py
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claude_tui_test
          REDIS_URL: redis://localhost:6379/0

      - name: 🧪 Run Unit Tests
        run: |
          pytest tests/unit/ -v --tb=short --junitxml=reports/unit-tests.xml

      - name: 🔗 Run Integration Tests
        run: |
          pytest tests/integration/ -v --tb=short --junitxml=reports/integration-tests.xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claude_tui_test
          REDIS_URL: redis://localhost:6379/0

      - name: 🛡️ Run Security Tests
        run: |
          pytest tests/security/ -v --tb=short --junitxml=reports/security-tests.xml

      - name: 🎯 Run Validation Tests
        run: |
          pytest tests/validation/ -v --tb=short --junitxml=reports/validation-tests.xml

      - name: 📊 Generate Coverage Report
        run: |
          pytest --cov=src/claude_tui --cov-report=xml --cov-report=html --cov-report=term
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claude_tui_test
          REDIS_URL: redis://localhost:6379/0

      - name: 📤 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}

      - name: 📋 Upload Test Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports-${{ matrix.python-version }}
          path: |
            reports/
            htmlcov/

  # Performance Testing
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: claude_tui_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,performance]

      - name: 🚀 Run Performance Tests
        run: |
          pytest tests/performance/ -v --benchmark-json=benchmark-results.json
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claude_tui_perf
          REDIS_URL: redis://localhost:6379/0

      - name: 📊 Upload Benchmark Results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json

  # Docker Build and Security Scan
  docker:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build Docker Images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

      - name: 🔍 Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Kubernetes Deployment Validation
  k8s-validate:
    name: ☸️ Kubernetes Validation
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Kubectl
        uses: azure/setup-kubectl@v3

      - name: ✅ Validate Kubernetes Manifests
        run: |
          kubectl --dry-run=client apply -f k8s/

      - name: 🔍 Lint Kubernetes Manifests
        uses: instrumenta/kubeval-action@master
        with:
          files: k8s/

  # Release Pipeline
  release:
    name: 🚢 Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [code-quality, test, performance, docker, k8s-validate]
    permissions:
      contents: write
      packages: write
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Build Distribution
        run: |
          python -m pip install --upgrade pip build
          python -m build

      - name: 📊 Generate Release Notes
        id: release_notes
        run: |
          echo "## 🚀 What's New" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🎉 Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # Deployment to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: [code-quality, test, docker]
    environment: staging
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add staging deployment logic here
          ./scripts/devops/deploy.sh staging

  # Deployment to Production
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [release]
    environment: production
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏭 Deploy to Production
        run: |
          echo "🏭 Deploying to production environment..."
          # Add production deployment logic here
          ./scripts/devops/deploy.sh production

  # Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [code-quality, test, performance, docker, k8s-validate]
    steps:
      - name: 🧹 Clean up artifacts
        run: |
          echo "🧹 Cleaning up temporary resources..."
          # Add cleanup logic if needed