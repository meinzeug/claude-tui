name: Security Monitoring

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 6 * * 1'  # Weekly security scan
  workflow_dispatch:

permissions:
  security-events: write
  contents: read
  actions: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Run Safety scan
        run: |
          pip install -r requirements.txt
          safety check --json --output safety-report.json || true

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/python
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build Docker image
        run: |
          docker build -t claude-tui:security-scan .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'claude-tui:security-scan'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-container-results.sarif'

      - name: Run Anchore Grype
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: 'claude-tui:security-scan'
          fail-build: false
          output-format: sarif

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}

  infrastructure-scan:
    name: Infrastructure as Code Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'docker'
          iac_version: 'v1'
          policy_type: 'docker'
          only_warn: true

  compliance-check:
    name: Compliance & Best Practices
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check file permissions
        run: |
          find . -type f -perm /o+w -exec ls -la {} \; > world_writable_files.txt
          if [ -s world_writable_files.txt ]; then
            echo "World-writable files found:"
            cat world_writable_files.txt
            exit 1
          fi

      - name: Check for hardcoded secrets patterns
        run: |
          # Basic patterns for demo - use more sophisticated tools in production
          grep -r -E "(password|secret|key|token)\s*=\s*['\"][^'\"]{8,}" src/ || echo "No obvious hardcoded secrets found"

      - name: Validate Docker best practices
        run: |
          docker run --rm -i hadolint/hadolint < Dockerfile

      - name: Check requirements.txt for known vulnerabilities
        run: |
          pip install safety
          safety check -r requirements.txt --json --output safety-requirements.json || true

      - name: Upload compliance results
        uses: actions/upload-artifact@v4
        with:
          name: compliance-results
          path: |
            world_writable_files.txt
            safety-requirements.json

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, code-analysis, container-scan, infrastructure-scan, compliance-check]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date)" >> security-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results" >> security-summary.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- Secret Detection: ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "- Code Analysis: ${{ needs.code-analysis.result }}" >> security-summary.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-summary.md
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-summary.md
          echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  notify-security:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, code-analysis, container-scan, infrastructure-scan, compliance-check]
    if: failure()
    steps:
      - name: Notify security team
        run: |
          echo "Security scan failures detected!"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Failed jobs: ${{ needs.*.result }}"
          # Add notification to security team (Slack, email, etc.)