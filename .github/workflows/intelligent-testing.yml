name: Intelligent Test Execution Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  test-selection:
    name: "🔍 Intelligent Test Selection"
    runs-on: ubuntu-latest
    outputs:
      test-files: ${{ steps.select.outputs.tests }}
      test-strategy: ${{ steps.select.outputs.strategy }}
      run-performance: ${{ steps.select.outputs.performance }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for intelligent selection
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: pip
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Select relevant tests
      id: select
      run: |
        # Run intelligent test selection
        python tests/utils/test_pyramid_validator.py --export pyramid-metrics.json
        
        # Determine test strategy based on changes
        if git diff --name-only HEAD~1..HEAD | grep -E "(core|ai|security)" > /dev/null; then
          echo "strategy=comprehensive" >> $GITHUB_OUTPUT
          echo "performance=true" >> $GITHUB_OUTPUT
        else
          echo "strategy=focused" >> $GITHUB_OUTPUT
          echo "performance=false" >> $GITHUB_OUTPUT  
        fi
        
        # Generate test file list (simplified for example)
        echo "tests=tests/" >> $GITHUB_OUTPUT
    
    - name: Upload test metrics
      uses: actions/upload-artifact@v3
      with:
        name: pyramid-metrics
        path: pyramid-metrics.json

  unit-tests:
    name: "🧪 Unit Tests"
    needs: test-selection
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,performance]
        pip install pytest-xdist  # Parallel test execution
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          -v \
          -m "unit and not slow" \
          --cov=src \
          --cov-branch \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=test-results-unit.xml \
          --maxfail=5 \
          -n auto \
          --dist=loadfile
      env:
        CLAUDE_TUI_ENV: test
        CLAUDE_API_KEY: test-key
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: |
          test-results-unit.xml
          htmlcov/
          coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: unit-tests-${{ matrix.python-version }}

  integration-tests:
    name: "🔗 Integration Tests" 
    needs: [test-selection, unit-tests]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_claude_tui
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: pip
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install psycopg2-binary  # PostgreSQL adapter
    
    - name: Setup test database
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_claude_tui"
        python scripts/init_database.py
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_claude_tui
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          -v \
          -m integration \
          --junitxml=test-results-integration.xml \
          --timeout=60 \
          --maxfail=3
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_claude_tui
        REDIS_URL: redis://localhost:6379/0
        CLAUDE_TUI_ENV: integration_test
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results-integration.xml

  security-tests:
    name: "🔒 Security Tests"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: pip
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install bandit safety
    
    - name: Run security tests
      run: |
        pytest tests/security/ \
          -v \
          -m security \
          --junitxml=test-results-security.xml
    
    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-results.json || true
    
    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-results.json || true
    
    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: |
          test-results-security.xml
          bandit-results.json
          safety-results.json

  test-summary:
    name: "📋 Test Summary"
    needs: [unit-tests, integration-tests, security-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Create test summary
      run: |
        echo "# 🧪 Test Execution Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "| Test Suite | Status |" >> test-summary.md
        echo "|------------|--------|" >> test-summary.md
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> test-summary.md
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> test-summary.md
        echo "| Security Tests | ${{ needs.security-tests.result }} |" >> test-summary.md
    
    - name: Set overall status
      run: |
        if [[ "${{ needs.unit-tests.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" && \
              "${{ needs.security-tests.result }}" == "success" ]]; then
          echo "✅ All critical tests passed!"
          exit 0
        else
          echo "❌ Some tests failed. Check individual test results."
          exit 1
        fi