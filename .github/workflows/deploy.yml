name: Production Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # Code Quality and Security Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Code formatting check
        run: |
          black --check --diff src/ tests/
          isort --check-only --diff src/ tests/

      - name: Type checking
        run: mypy src/ --ignore-missing-imports

      - name: Security scan with Bandit
        run: bandit -r src/ -f json -o security-report.json
        continue-on-error: true

      - name: Dependency vulnerability scan
        run: safety check --json --output vulnerability-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security-report.json
            vulnerability-report.json

  # Comprehensive Testing Suite
  test:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        test-type: ['unit', 'integration', 'performance']
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: claude_tui_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          npm install -g claude-flow@alpha

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html \
            --junit-xml=test-results-unit.xml

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claude_tui_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/integration/ -v --junit-xml=test-results-integration.xml

      - name: Run performance tests
        if: matrix.test-type == 'performance'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claude_tui_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/performance/ -v --benchmark-json=benchmark-results.json

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
          path: |
            test-results-*.xml
            htmlcov/
            benchmark-results.json
            coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.test-type == 'unit' && matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # Build and Security Scan Docker Images
  build:
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          target: production
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check Docker image vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.image.outputs.image }}
          args: --severity-threshold=high --file=Dockerfile

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.claude-tui.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name claude-tui-staging

      - name: Deploy to staging
        run: |
          envsubst < k8s/staging/deployment.yaml | kubectl apply -f -
          kubectl set image deployment/claude-tui claude-tui=${{ needs.build.outputs.image }} -n claude-tui-staging
          kubectl rollout status deployment/claude-tui -n claude-tui-staging --timeout=300s
        env:
          IMAGE: ${{ needs.build.outputs.image }}

      - name: Run smoke tests
        run: |
          ./deployment/scripts/smoke-tests.sh staging

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Staging deployment completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Production Deployment with Approval
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://claude-tui.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name claude-tui-production

      - name: Blue-Green deployment
        run: |
          ./deployment/scripts/blue-green-deploy.sh ${{ needs.build.outputs.image }}

      - name: Health checks
        run: |
          ./deployment/scripts/health-checks.sh production

      - name: Performance validation
        run: |
          ./deployment/scripts/performance-validation.sh production

      - name: Rollback on failure
        if: failure()
        run: |
          ./deployment/scripts/rollback.sh production

      - name: Create GitHub release
        uses: actions/create-release@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#production'
          text: 'Production deployment completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security and Compliance Checks
  security-compliance:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'claude-tui'
          path: '.'
          format: 'ALL'

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-reports
          path: reports/

      - name: Run Semgrep security analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

      - name: License compliance check
        run: |
          pip-licenses --format=json --output-file=licenses.json
          # Add custom license validation logic here

      - name: Upload compliance reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: |
            licenses.json
            reports/

  # Performance Monitoring
  performance-monitoring:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load testing with k6
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js

      - name: Performance regression check
        run: |
          python scripts/check_performance_regression.py

      - name: Update performance baseline
        run: |
          # Store new baseline if performance is acceptable
          echo "Performance validation completed"