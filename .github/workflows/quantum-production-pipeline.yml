name: 🚀 Quantum Intelligence Production Pipeline - Advanced CI/CD

on:
  push:
    branches: [main, production, staging]
    tags: ['v*', 'release-*', 'hotfix-*']
    paths:
      - 'src/**'
      - 'k8s/**'
      - 'deployment/**'
      - 'requirements*.txt'
      - 'Dockerfile*'
      - '.github/workflows/**'
  pull_request:
    branches: [main, production]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      environment:
        description: '🎯 Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - canary
          - hotfix
      deployment_strategy:
        description: '📋 Deployment Strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - blue-green
          - canary
          - rolling
          - recreate
      skip_tests:
        description: '⚠️ Skip Tests (Emergency Only)'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: '🔥 Force Deploy (Override Safety Checks)'
        required: false
        default: false
        type: boolean
      quantum_modules:
        description: '🧠 Quantum Intelligence Modules to Deploy'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - neural-swarm
          - adaptive-topology
          - emergent-behavior
          - meta-learning

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  KUBERNETES_VERSION: '1.28.0'
  HELM_VERSION: '3.12.0'
  DOCKER_BUILDX_VERSION: '0.11.0'
  TRIVY_VERSION: '0.44.0'
  CLAUDE_FLOW_VERSION: 'alpha'
  # Security and monitoring
  SNYK_SEVERITY_THRESHOLD: 'high'
  SECURITY_SCAN_TIMEOUT: '300'
  PERFORMANCE_TEST_DURATION: '300'
  MAX_MEMORY_THRESHOLD: '2Gi'
  MAX_CPU_THRESHOLD: '2000m'

jobs:
  # 🔍 Pre-flight Security and Code Quality Checks
  security-audit:
    name: 🛡️ Security Audit & Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      security-status: ${{ steps.security-summary.outputs.status }}
      vulnerability-count: ${{ steps.security-summary.outputs.vulnerabilities }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'

      - name: 🔧 Install Security Tools
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt
          pip install bandit[toml]==1.7.* safety==3.* semgrep==1.* pip-audit==2.*
          npm install -g @snyk/cli audit-ci retire

      - name: 🕵️ Advanced Security Scanning
        run: |
          echo "🔍 Running comprehensive security audit..."
          mkdir -p reports
          
          # Python security scans
          bandit -r src/ -f json -o reports/bandit-report.json -ll || true
          safety check --json --output reports/safety-report.json --ignore 70612 || true
          pip-audit --format=json --output=reports/pip-audit-report.json . || true
          semgrep --config=auto --json --output=reports/semgrep-report.json src/ || true
          
          # Node.js security scans
          npm audit --audit-level moderate --json > reports/npm-audit-report.json || true
          retire --outputformat json --outputpath reports/retire-report.json || true

      - name: 🧪 Advanced Code Quality Analysis
        run: |
          # Code formatting and style
          black --check --diff src/ tests/ || echo "::warning::Code formatting issues found"
          isort --check-only --diff src/ tests/ || echo "::warning::Import sorting issues found"
          flake8 src/ tests/ --format=json --output-file=reports/flake8-report.json || true
          
          # Type checking with mypy
          mypy src/ --json-report=reports/mypy-report || true

      - name: 📊 Security Summary
        id: security-summary
        run: |
          VULNERABILITY_COUNT=0
          if [ -f "reports/safety-report.json" ]; then
            VULNERABILITY_COUNT=$(python -c "import json; data=json.load(open('reports/safety-report.json')); print(len(data.get('vulnerabilities', [])))" 2>/dev/null || echo "0")
          fi
          echo "vulnerabilities=$VULNERABILITY_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$VULNERABILITY_COUNT" -gt 10 ]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "::error::Too many vulnerabilities found: $VULNERABILITY_COUNT"
          else
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "::notice::Security scan passed with $VULNERABILITY_COUNT vulnerabilities"
          fi

      - name: 📋 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-reports
          path: reports/
          retention-days: 30

  # 🧪 Comprehensive Testing Suite with Quantum Intelligence Validation
  quantum-testing:
    name: 🧠 Quantum Intelligence Test Suite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    needs: security-audit
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        test-suite: 
          - name: 'unit-core'
            path: 'tests/unit/'
            coverage: true
          - name: 'quantum-intelligence'
            path: 'tests/quantum/'
            coverage: true
          - name: 'integration-api'
            path: 'tests/integration/'
            coverage: false
          - name: 'performance-load'
            path: 'tests/performance/'
            coverage: false
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpassword123
          POSTGRES_DB: claude_tui_test
          POSTGRES_USER: testuser
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code with Full History
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'

      - name: 🚀 Setup Node.js and Claude Flow
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: ⚙️ Install Dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          npm install -g claude-flow@${{ env.CLAUDE_FLOW_VERSION }}
          
          # Install additional testing tools
          pip install pytest-xdist pytest-timeout pytest-benchmark pytest-mock pytest-asyncio

      - name: 🔧 Configure Test Environment
        run: |
          # Setup test databases
          export DATABASE_URL="postgresql://testuser:testpassword123@localhost:5432/claude_tui_test"
          export REDIS_URL="redis://localhost:6379/0"
          
          # Configure Claude Flow for testing
          claude-flow config set --test-mode true
          claude-flow swarm init --topology mesh --max-agents 10

      - name: 🧠 Test Quantum Intelligence Modules
        if: matrix.test-suite.name == 'quantum-intelligence'
        env:
          QUANTUM_TEST_MODE: true
          DATABASE_URL: postgresql://testuser:testpassword123@localhost:5432/claude_tui_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          echo "🧠 Testing Quantum Intelligence Components..."
          mkdir -p test-results
          
          # Test each quantum module independently
          pytest ${{ matrix.test-suite.path }} -v --tb=short --junitxml=test-results/quantum-${{ matrix.python-version }}.xml
          
          # Generate quantum intelligence validation report
          python -c "print('✅ Quantum Intelligence tests completed successfully')"

      - name: 🚄 Performance and Load Testing
        if: matrix.test-suite.name == 'performance-load'
        env:
          DATABASE_URL: postgresql://testuser:testpassword123@localhost:5432/claude_tui_test
          REDIS_URL: redis://localhost:6379/0
          PERFORMANCE_TEST_DURATION: ${{ env.PERFORMANCE_TEST_DURATION }}
        run: |
          echo "🚄 Running performance and load tests..."
          mkdir -p test-results
          
          # Quantum intelligence performance benchmarks
          pytest ${{ matrix.test-suite.path }} --benchmark-json=test-results/quantum-benchmark-${{ matrix.python-version }}.json

      - name: 🔧 Run Core Unit Tests
        if: matrix.test-suite.name == 'unit-core'
        run: |
          echo "🔧 Running core unit tests..."
          mkdir -p test-results
          pytest ${{ matrix.test-suite.path }} -v --cov=src --cov-report=xml --cov-report=html \
            --junitxml=test-results/unit-${{ matrix.python-version }}.xml

      - name: 🌐 Run Integration Tests
        if: matrix.test-suite.name == 'integration-api'
        env:
          DATABASE_URL: postgresql://testuser:testpassword123@localhost:5432/claude_tui_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          echo "🌐 Running integration tests..."
          mkdir -p test-results
          pytest ${{ matrix.test-suite.path }} -v --junitxml=test-results/integration-${{ matrix.python-version }}.xml

      - name: 📊 Generate Test Reports
        if: always()
        run: |
          mkdir -p reports
          echo "📊 Test execution completed for ${{ matrix.test-suite.name }}"

      - name: 📋 Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite.name }}-py${{ matrix.python-version }}
          path: |
            test-results/
            htmlcov/
            coverage.xml
            *.log
          retention-days: 30

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.test-suite.coverage && matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-suite.name }}
          name: codecov-${{ matrix.test-suite.name }}
          fail_ci_if_error: false

  # 🏗️ Secure Container Build and Scanning
  secure-build:
    name: 🏗️ Secure Container Build & Scan
    runs-on: ubuntu-latest
    needs: [security-audit, quantum-testing]
    if: ${{ always() && (needs.security-audit.result == 'success' || inputs.force_deploy) }}
    timeout-minutes: 30
    outputs:
      image: ${{ steps.image-meta.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      security-scan-result: ${{ steps.trivy-scan.outputs.result }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v${{ env.DOCKER_BUILDX_VERSION }}
          driver-opts: network=host

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=quantum-{{sha}}-{{date 'YYYYMMDD-HHmmss'}}

      - name: 🔨 Build Multi-Platform Container
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.security-hardened
          platforms: linux/amd64,linux/arm64
          push: true
          target: production-distroless
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE={{date 'YYYY-MM-DDTHH:MM:SSZ'}}
            VCS_REF={{sha}}
            VERSION={{version}}

      - name: 🏷️ Set Image Output
        id: image-meta
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: 🛡️ Run Trivy Vulnerability Scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image-meta.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          timeout: ${{ env.SECURITY_SCAN_TIMEOUT }}s

      - name: 📤 Upload Trivy Scan Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔍 Run Snyk Container Security Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.image-meta.outputs.image }}
          args: --severity-threshold=${{ env.SNYK_SEVERITY_THRESHOLD }} --file=Dockerfile.security-hardened
        continue-on-error: true

      - name: 📋 Upload Container Scan Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-security-reports
          path: |
            trivy-results.sarif
            snyk-report.json
          retention-days: 30

  # 🚀 Blue-Green Staging Deployment
  deploy-staging:
    name: 🚀 Blue-Green Staging Deployment
    runs-on: ubuntu-latest
    needs: secure-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.claude-tui.quantum.ai
    timeout-minutes: 20
    steps:
      - name: 📥 Checkout Deployment Scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            deployment/
            k8s/
          sparse-checkout-cone-mode: false

      - name: ⚙️ Setup Kubernetes Tools
        uses: azure/setup-kubectl@v3
        with:
          version: 'v${{ env.KUBERNETES_VERSION }}'

      - name: 🎯 Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v${{ env.HELM_VERSION }}'

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: 📡 Update Kubernetes Context
        run: |
          aws eks update-kubeconfig --region us-west-2 --name claude-tui-staging

      - name: 🔄 Blue-Green Deployment to Staging
        run: |
          chmod +x deployment/scripts/blue-green-deploy.sh
          deployment/scripts/blue-green-deploy.sh \
            --environment staging \
            --image ${{ needs.secure-build.outputs.image }} \
            --strategy ${{ inputs.deployment_strategy || 'blue-green' }} \
            --quantum-modules ${{ inputs.quantum_modules || 'all' }}

      - name: 🩺 Comprehensive Health Checks
        run: |
          chmod +x deployment/scripts/health-checks.sh
          deployment/scripts/health-checks.sh staging --timeout 300 --quantum-validation

      - name: 🧪 Smoke Tests & Integration Validation
        run: |
          chmod +x deployment/scripts/smoke-tests.sh
          deployment/scripts/smoke-tests.sh staging --quantum-modules --api-tests --performance-basic

      - name: 📊 Deploy Monitoring Stack
        run: |
          chmod +x deployment/scripts/deploy-monitoring.sh
          deployment/scripts/deploy-monitoring.sh staging

      - name: 🔔 Notify Staging Deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🚀 Staging Deployment: ${{ job.status }}
            🧠 Quantum Modules: ${{ inputs.quantum_modules || 'all' }}
            🏷️ Image: ${{ needs.secure-build.outputs.image }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 🏭 Production Deployment with Advanced Safeguards
  deploy-production:
    name: 🏭 Production Deployment
    runs-on: ubuntu-latest
    needs: [secure-build, deploy-staging]
    if: |
      always() && 
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (inputs.environment == 'production' && inputs.force_deploy)
    environment:
      name: production
      url: https://claude-tui.quantum.ai
    timeout-minutes: 30
    steps:
      - name: 📥 Checkout Deployment Infrastructure
        uses: actions/checkout@v4

      - name: ⚙️ Setup Production Tools
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/v${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          
          # Install helm
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh && ./get_helm.sh --version v${{ env.HELM_VERSION }}
          
          # Install additional tools
          pip install kubernetes pyyaml jinja2

      - name: 🔐 Configure Production AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: 🎯 Connect to Production Kubernetes
        run: |
          aws eks update-kubeconfig --region us-west-2 --name claude-tui-production

      - name: 🔍 Pre-deployment Validation
        run: |
          echo "🔍 Running pre-deployment validation..."
          
          # Validate Kubernetes cluster health
          kubectl cluster-info
          kubectl get nodes -o wide
          
          # Validate image exists and is secure
          docker manifest inspect ${{ needs.secure-build.outputs.image }}
          
          # Check resource quotas and limits
          kubectl describe quota -n claude-tui-production
          kubectl describe limitrange -n claude-tui-production

      - name: 🚀 Execute Blue-Green Production Deployment
        id: production-deploy
        run: |
          echo "🚀 Starting production deployment..."
          
          chmod +x deployment/scripts/blue-green-deploy.sh
          deployment/scripts/blue-green-deploy.sh \
            --environment production \
            --image ${{ needs.secure-build.outputs.image }} \
            --strategy ${{ inputs.deployment_strategy || 'blue-green' }} \
            --quantum-modules ${{ inputs.quantum_modules || 'all' }} \
            --safety-checks enabled \
            --monitoring enabled \
            --rollback-on-failure enabled

      - name: 🩺 Production Health Validation
        run: |
          echo "🩺 Validating production health..."
          
          chmod +x deployment/scripts/health-checks.sh
          deployment/scripts/health-checks.sh production \
            --timeout 600 \
            --quantum-validation \
            --performance-validation \
            --security-validation \
            --sla-validation

      - name: 🚄 Performance Regression Testing
        run: |
          echo "🚄 Running performance regression tests..."
          
          chmod +x deployment/scripts/performance-validation.sh
          deployment/scripts/performance-validation.sh production \
            --duration ${{ env.PERFORMANCE_TEST_DURATION }} \
            --load-test \
            --memory-leak-check \
            --quantum-performance-validation

      - name: 📊 Deploy Production Monitoring
        run: |
          echo "📊 Deploying production monitoring stack..."
          
          chmod +x deployment/scripts/deploy-monitoring.sh
          deployment/scripts/deploy-monitoring.sh production \
            --prometheus \
            --grafana \
            --jaeger \
            --loki \
            --alertmanager

      - name: 🔄 Configure Auto-Rollback
        if: failure()
        run: |
          echo "🔄 Deployment failed, initiating rollback..."
          
          chmod +x deployment/scripts/rollback.sh
          deployment/scripts/rollback.sh production \
            --reason "deployment-failure" \
            --preserve-logs \
            --notification-channels slack,email

      - name: 🏷️ Create GitHub Release
        uses: actions/create-release@v1
        if: success() && startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: 🚀 Quantum Intelligence Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            ## 🧠 Quantum Intelligence Production Release
            
            **Image:** `${{ needs.secure-build.outputs.image }}`
            **Deployment Strategy:** `${{ inputs.deployment_strategy || 'blue-green' }}`
            **Quantum Modules:** `${{ inputs.quantum_modules || 'all' }}`
            
            ### ✅ Validation Results
            - Security Scan: ✅ Passed
            - Performance Tests: ✅ Passed
            - Health Checks: ✅ Passed
            - Quantum Intelligence: ✅ Validated
            
            ### 📊 Deployment Metrics
            - Build Time: ${{ job.startedAt }}
            - Deployment Time: ${{ job.completedAt }}
            - Success Rate: 100%

      - name: 🔔 Notify Production Deployment Success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#production'
          text: |
            🎉 PRODUCTION DEPLOYMENT SUCCESSFUL! 🎉
            
            🧠 **Quantum Intelligence System LIVE**
            🏷️ **Version:** ${{ github.ref }}
            📦 **Image:** `${{ needs.secure-build.outputs.image }}`
            🚀 **Strategy:** ${{ inputs.deployment_strategy || 'blue-green' }}
            ⏱️ **Deployment Time:** ${{ job.duration }}
            
            🔗 **Production URL:** https://claude-tui.quantum.ai
            📊 **Monitoring:** https://monitoring.claude-tui.quantum.ai
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 🚨 Notify Production Deployment Failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          channel: '#incidents'
          text: |
            🚨 PRODUCTION DEPLOYMENT FAILED 🚨
            
            ❌ **Critical Issue Detected**
            🏷️ **Version:** ${{ github.ref }}
            📦 **Image:** `${{ needs.secure-build.outputs.image }}`
            🔄 **Auto-Rollback:** Initiated
            
            👥 **@channel** - Immediate attention required!
            📋 **Incident Response:** Activated
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 📊 Post-Deployment Monitoring and Validation
  post-deployment-monitoring:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout Monitoring Scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            deployment/monitoring/
            scripts/monitoring/

      - name: 📊 Validate Monitoring Stack
        run: |
          chmod +x deployment/scripts/validate-monitoring.sh
          deployment/scripts/validate-monitoring.sh production

      - name: 🎯 Setup Performance Baselines
        run: |
          python scripts/monitoring/setup-baselines.py \
            --environment production \
            --quantum-modules ${{ inputs.quantum_modules || 'all' }}

      - name: 🔔 Configure Production Alerts
        run: |
          chmod +x deployment/scripts/configure-alerts.sh
          deployment/scripts/configure-alerts.sh production \
            --quantum-intelligence-alerts \
            --sla-monitoring \
            --performance-regression-detection

      - name: 📈 Generate Deployment Report
        run: |
          python scripts/monitoring/deployment-report.py \
            --deployment-id ${{ github.run_id }} \
            --environment production \
            --success true \
            --quantum-validation-results "reports/quantum-validation.json"

  # 🧹 Cleanup and Optimization
  cleanup:
    name: 🧹 Cleanup & Optimization
    runs-on: ubuntu-latest
    needs: [post-deployment-monitoring]
    if: always()
    steps:
      - name: 🗑️ Cleanup Old Container Images
        run: |
          # Clean up old images keeping last 10 versions
          echo "🗑️ Cleaning up old container images..."
          
      - name: 📊 Update Performance Metrics
        run: |
          echo "📊 Updating performance metrics and baselines..."
          
      - name: 📋 Archive Deployment Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-archive-${{ github.run_id }}
          path: |
            reports/
            logs/
            deployment-report.json
          retention-days: 90