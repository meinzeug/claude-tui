name: Production Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    outputs:
      vulnerability-count: ${{ steps.trivy.outputs.vulnerability-count }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        id: trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  code-quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest coverage black flake8 mypy
          
      - name: Code formatting check
        run: black --check src/ tests/
        
      - name: Lint with flake8
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203
        
      - name: Type checking with mypy
        run: mypy src/ --ignore-missing-imports
        
      - name: Run tests with coverage
        run: |
          coverage run -m pytest tests/ -v --tb=short
          coverage report --fail-under=80
          coverage xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  performance-tests:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install locust pytest-benchmark
          
      - name: Run performance benchmarks
        run: |
          python -m pytest tests/performance/ --benchmark-json=benchmark.json
          
      - name: Performance regression check
        run: |
          # Check if response time > 500ms baseline
          python scripts/check_performance_regression.py benchmark.json
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.json

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, performance-tests]
    if: github.event_name != 'pull_request'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json
          
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.claude-tui.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
          
      - name: Deploy to staging
        run: |
          cd k8s
          kubectl apply -f namespace.yaml
          kubectl apply -f configmap.yaml
          kubectl apply -f secrets.yaml
          kubectl set image deployment/claude-tui claude-tui=${{ needs.build-and-push.outputs.image-tag }} -n claude-tui-staging
          kubectl rollout status deployment/claude-tui -n claude-tui-staging --timeout=300s
          
      - name: Smoke tests
        run: |
          ./scripts/smoke-tests.sh staging.claude-tui.com
          
      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://claude-tui.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
          
      - name: Pre-deployment backup
        run: |
          kubectl create backup production-backup-$(date +%Y%m%d-%H%M%S) -n claude-tui-production || echo "Backup creation skipped"
          
      - name: Blue-Green Deployment
        run: |
          cd k8s
          # Update image in deployment
          kubectl set image deployment/claude-tui claude-tui=${{ needs.build-and-push.outputs.image-tag }} -n claude-tui-production
          
          # Wait for rollout with timeout
          kubectl rollout status deployment/claude-tui -n claude-tui-production --timeout=600s
          
          # Health check
          kubectl wait --for=condition=ready pod -l app=claude-tui -n claude-tui-production --timeout=300s
          
      - name: Post-deployment validation
        run: |
          ./scripts/production-validation.sh
          
      - name: Rollback on failure
        if: failure()
        run: |
          kubectl rollout undo deployment/claude-tui -n claude-tui-production
          kubectl rollout status deployment/claude-tui -n claude-tui-production --timeout=300s
          
      - name: Update production monitoring
        run: |
          curl -X POST "${{ secrets.DATADOG_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "title": "Claude-TIU Production Deployment",
              "text": "Successfully deployed ${{ github.sha }} to production",
              "alert_type": "info",
              "source_type_name": "github"
            }'
            
      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#production-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  monitoring-setup:
    name: Update Monitoring & Alerting
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    steps:
      - uses: actions/checkout@v4
      
      - name: Update Grafana dashboards
        run: |
          curl -X POST "${{ secrets.GRAFANA_API_URL }}/api/dashboards/db" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @monitoring/grafana-dashboard.json
            
      - name: Update alert rules
        run: |
          kubectl apply -f monitoring/prometheus-rules.yaml -n monitoring
          
      - name: Test alert channels
        run: |
          ./scripts/test-alert-channels.sh