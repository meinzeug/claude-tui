---
# ðŸ§  Quantum Intelligence Production Deployment Configuration
# High-availability, scalable deployment with advanced quantum modules
# Author: CI/CD Engineer - Hive Mind Team
# Version: 2.0.0

apiVersion: v1
kind: Namespace
metadata:
  name: claude-tui-production
  labels:
    name: claude-tui-production
    environment: production
    monitoring: enabled
    quantum-intelligence: enabled
    security: hardened
  annotations:
    description: "Quantum Intelligence Production Environment"
    contact: "devops@claude-tui.quantum.ai"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: quantum-config
  namespace: claude-tui-production
  labels:
    app: claude-tui
    component: quantum-intelligence
    environment: production
data:
  quantum.yaml: |
    quantum_intelligence:
      enabled: true
      modules:
        neural_swarm_evolution:
          enabled: true
          population_size: 1000
          evolution_rate: 0.1
          mutation_probability: 0.01
          crossover_rate: 0.8
        adaptive_topology_manager:
          enabled: true
          max_nodes: 10000
          optimization_interval: 30
          adaptation_threshold: 0.75
        emergent_behavior_engine:
          enabled: true
          pattern_recognition: advanced
          complexity_analysis: deep
          emergence_threshold: 0.9
        meta_learning_coordinator:
          enabled: true
          learning_rate: 0.001
          adaptation_cycles: 100
          meta_optimization: true
      performance:
        processing_timeout: 30
        memory_limit: "4Gi"
        cpu_limit: "2000m"
        concurrent_processes: 4
      monitoring:
        metrics_enabled: true
        tracing_enabled: true
        health_checks: comprehensive
        performance_profiling: true

---
apiVersion: v1
kind: Secret
metadata:
  name: quantum-secrets
  namespace: claude-tui-production
  labels:
    app: claude-tui
    component: quantum-intelligence
    environment: production
type: Opaque
data:
  # These would be base64 encoded secrets
  neural-swarm-key: cXVhbnR1bS1uZXVyYWwtc3dhcm0ta2V5LXBsYWNlaG9sZGVy
  topology-encryption-key: dG9wb2xvZ3ktZW5jcnlwdGlvbi1rZXktcGxhY2Vob2xkZXI=
  meta-learning-token: bWV0YS1sZWFybmluZy10b2tlbi1wbGFjZWhvbGRlcg==
  database-password: ZGF0YWJhc2UtcGFzc3dvcmQtcGxhY2Vob2xkZXI=

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: claude-tui-blue
  namespace: claude-tui-production
  labels:
    app: claude-tui
    version: blue
    component: quantum-intelligence
    environment: production
  annotations:
    deployment.kubernetes.io/revision: "1"
    quantum-intelligence/modules: "all"
    monitoring/scrape: "true"
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: claude-tui
      version: blue
  template:
    metadata:
      labels:
        app: claude-tui
        version: blue
        component: quantum-intelligence
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        prometheus.io/quantum: "true"
        jaeger.io/trace: "true"
        config.linkerd.io/skip-inbound-ports: "9090"
        config.linkerd.io/skip-outbound-ports: "443"
    spec:
      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      
      # Service Account
      serviceAccountName: claude-tui-quantum
      automountServiceAccountToken: false
      
      # Node Selection
      nodeSelector:
        node.kubernetes.io/instance-type: m5.2xlarge
        quantum-intelligence: enabled
      
      # Tolerations for dedicated quantum nodes
      tolerations:
      - key: quantum-intelligence
        operator: Equal
        value: dedicated
        effect: NoSchedule
      
      # Anti-affinity for high availability
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["claude-tui"]
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node.kubernetes.io/availability-zone
                operator: In
                values: ["us-west-2a", "us-west-2b", "us-west-2c"]
      
      # Init Containers
      initContainers:
      - name: quantum-initializer
        image: ghcr.io/claude-tui/quantum-initializer:v2.0.0
        imagePullPolicy: Always
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Initializing Quantum Intelligence modules..."
          /opt/quantum/scripts/initialize-modules.sh
          echo "Quantum initialization complete"
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: quantum-config
          mountPath: /etc/quantum
          readOnly: true
        - name: quantum-data
          mountPath: /opt/quantum/data
        - name: temp-dir
          mountPath: /tmp
      
      # Main Container
      containers:
      - name: claude-tui
        image: ${IMAGE}
        imagePullPolicy: Always
        
        # Ports
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        - name: quantum-api
          containerPort: 8001
          protocol: TCP
        - name: neural-swarm
          containerPort: 8002
          protocol: TCP
        - name: topology-mgr
          containerPort: 8003
          protocol: TCP
        
        # Environment Variables
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: QUANTUM_INTELLIGENCE_ENABLED
          value: "true"
        - name: QUANTUM_MODULES
          value: "all"
        - name: PERFORMANCE_PROFILE
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: METRICS_ENABLED
          value: "true"
        - name: TRACING_ENABLED
          value: "true"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: quantum-secrets
              key: database-password
        - name: NEURAL_SWARM_KEY
          valueFrom:
            secretKeyRef:
              name: quantum-secrets
              key: neural-swarm-key
        
        # Resource Requirements
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            ephemeral-storage: "2Gi"
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Startup Probe for slow quantum initialization
        startupProbe:
          httpGet:
            path: /startup
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        # Security Context
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        
        # Volume Mounts
        volumeMounts:
        - name: quantum-config
          mountPath: /app/config
          readOnly: true
        - name: quantum-data
          mountPath: /app/data
        - name: temp-dir
          mountPath: /tmp
        - name: logs-dir
          mountPath: /app/logs
        - name: cache-dir
          mountPath: /app/cache
      
      # Sidecar Container for Enhanced Monitoring
      - name: quantum-monitor
        image: ghcr.io/claude-tui/quantum-monitor:v2.0.0
        imagePullPolicy: Always
        
        ports:
        - name: monitor
          containerPort: 9091
          protocol: TCP
        
        env:
        - name: QUANTUM_TARGET
          value: "localhost:8000"
        - name: MONITORING_INTERVAL
          value: "10s"
        - name: METRICS_PORT
          value: "9091"
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        
        volumeMounts:
        - name: temp-dir
          mountPath: /tmp
      
      # Volumes
      volumes:
      - name: quantum-config
        configMap:
          name: quantum-config
          defaultMode: 0444
      - name: quantum-data
        persistentVolumeClaim:
          claimName: quantum-data-pvc
      - name: temp-dir
        emptyDir:
          sizeLimit: 1Gi
      - name: logs-dir
        emptyDir:
          sizeLimit: 2Gi
      - name: cache-dir
        emptyDir:
          sizeLimit: 1Gi
      
      # DNS Configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Restart Policy
      restartPolicy: Always
      
      # Termination Grace Period
      terminationGracePeriodSeconds: 60

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: claude-tui-green
  namespace: claude-tui-production
  labels:
    app: claude-tui
    version: green
    component: quantum-intelligence
    environment: production
  annotations:
    deployment.kubernetes.io/revision: "1"
    quantum-intelligence/modules: "all"
    monitoring/scrape: "true"
spec:
  replicas: 0  # Initially scaled to 0 for blue-green deployment
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: claude-tui
      version: green
  template:
    metadata:
      labels:
        app: claude-tui
        version: green
        component: quantum-intelligence
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        prometheus.io/quantum: "true"
        jaeger.io/trace: "true"
    spec:
      # Same specification as blue deployment
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      
      serviceAccountName: claude-tui-quantum
      automountServiceAccountToken: false
      
      nodeSelector:
        node.kubernetes.io/instance-type: m5.2xlarge
        quantum-intelligence: enabled
      
      tolerations:
      - key: quantum-intelligence
        operator: Equal
        value: dedicated
        effect: NoSchedule
      
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["claude-tui"]
            topologyKey: kubernetes.io/hostname
      
      initContainers:
      - name: quantum-initializer
        image: ghcr.io/claude-tui/quantum-initializer:v2.0.0
        imagePullPolicy: Always
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Initializing Quantum Intelligence modules (green)..."
          /opt/quantum/scripts/initialize-modules.sh
          echo "Quantum initialization complete"
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: quantum-config
          mountPath: /etc/quantum
          readOnly: true
        - name: quantum-data
          mountPath: /opt/quantum/data
        - name: temp-dir
          mountPath: /tmp
      
      containers:
      - name: claude-tui
        image: ${IMAGE}
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        - name: quantum-api
          containerPort: 8001
          protocol: TCP
        - name: neural-swarm
          containerPort: 8002
          protocol: TCP
        - name: topology-mgr
          containerPort: 8003
          protocol: TCP
        
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: QUANTUM_INTELLIGENCE_ENABLED
          value: "true"
        - name: QUANTUM_MODULES
          value: "all"
        - name: PERFORMANCE_PROFILE
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: METRICS_ENABLED
          value: "true"
        - name: TRACING_ENABLED
          value: "true"
        - name: DEPLOYMENT_COLOR
          value: "green"
        
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            ephemeral-storage: "2Gi"
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /startup
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        
        volumeMounts:
        - name: quantum-config
          mountPath: /app/config
          readOnly: true
        - name: quantum-data
          mountPath: /app/data
        - name: temp-dir
          mountPath: /tmp
        - name: logs-dir
          mountPath: /app/logs
        - name: cache-dir
          mountPath: /app/cache
      
      - name: quantum-monitor
        image: ghcr.io/claude-tui/quantum-monitor:v2.0.0
        imagePullPolicy: Always
        
        ports:
        - name: monitor
          containerPort: 9091
          protocol: TCP
        
        env:
        - name: QUANTUM_TARGET
          value: "localhost:8000"
        - name: MONITORING_INTERVAL
          value: "10s"
        - name: METRICS_PORT
          value: "9091"
        - name: DEPLOYMENT_COLOR
          value: "green"
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        
        volumeMounts:
        - name: temp-dir
          mountPath: /tmp
      
      volumes:
      - name: quantum-config
        configMap:
          name: quantum-config
          defaultMode: 0444
      - name: quantum-data
        persistentVolumeClaim:
          claimName: quantum-data-pvc
      - name: temp-dir
        emptyDir:
          sizeLimit: 1Gi
      - name: logs-dir
        emptyDir:
          sizeLimit: 2Gi
      - name: cache-dir
        emptyDir:
          sizeLimit: 1Gi
      
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      restartPolicy: Always
      terminationGracePeriodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  name: claude-tui
  namespace: claude-tui-production
  labels:
    app: claude-tui
    component: quantum-intelligence
    environment: production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/quantum: "true"
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  selector:
    app: claude-tui
    version: blue  # Initially points to blue deployment
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8000
    protocol: TCP
  - name: quantum-api
    port: 8001
    targetPort: 8001
    protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: claude-tui-blue
  namespace: claude-tui-production
  labels:
    app: claude-tui
    version: blue
    component: quantum-intelligence
    environment: production
spec:
  type: ClusterIP
  selector:
    app: claude-tui
    version: blue
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: quantum-api
    port: 8001
    targetPort: 8001
    protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: claude-tui-green
  namespace: claude-tui-production
  labels:
    app: claude-tui
    version: green
    component: quantum-intelligence
    environment: production
spec:
  type: ClusterIP
  selector:
    app: claude-tui
    version: green
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: quantum-api
    port: 8001
    targetPort: 8001
    protocol: TCP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: claude-tui-quantum
  namespace: claude-tui-production
  labels:
    app: claude-tui
    component: quantum-intelligence
    environment: production
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/claude-tui-quantum-role

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: claude-tui-quantum
  namespace: claude-tui-production
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: claude-tui-quantum
  namespace: claude-tui-production
subjects:
- kind: ServiceAccount
  name: claude-tui-quantum
  namespace: claude-tui-production
roleRef:
  kind: Role
  name: claude-tui-quantum
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: quantum-data-pvc
  namespace: claude-tui-production
  labels:
    app: claude-tui
    component: quantum-intelligence
    environment: production
spec:
  accessModes:
  - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 100Gi

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: claude-tui-hpa
  namespace: claude-tui-production
  labels:
    app: claude-tui
    component: quantum-intelligence
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: claude-tui-blue
  minReplicas: 5
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: quantum_processing_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      selectPolicy: Min

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: claude-tui-pdb
  namespace: claude-tui-production
  labels:
    app: claude-tui
    component: quantum-intelligence
    environment: production
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app: claude-tui

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: claude-tui-network-policy
  namespace: claude-tui-production
  labels:
    app: claude-tui
    component: quantum-intelligence
    environment: production
spec:
  podSelector:
    matchLabels:
      app: claude-tui
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: claude-tui
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 9090
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 443