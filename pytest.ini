[tool:pytest]
# Comprehensive pytest configuration for claude-tiu testing suite

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Core test execution options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --maxfail=5
    --durations=20
    --color=yes
    --asyncio-mode=auto
    --show-capture=no
    --disable-warnings
    --cov=src
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=json:coverage.json
    --cov-fail-under=80
    --cov-branch
    --hypothesis-show-statistics
    --hypothesis-verbosity=normal

# Comprehensive test markers
markers =
    # Test categories
    unit: Unit tests for individual components
    integration: Integration tests between services
    performance: Performance and load tests
    security: Security and vulnerability tests
    tui: Text User Interface tests
    validation: Anti-hallucination validation tests
    api: API endpoint tests
    database: Database-related tests
    
    # Test characteristics
    slow: Slow running tests (> 5 seconds)
    fast: Fast tests (< 1 second)
    external: Tests requiring external dependencies
    network: Tests requiring network access
    
    # Test focus areas
    edge_case: Edge case and error handling tests
    regression: Regression tests
    smoke: Smoke tests for basic functionality
    critical: Critical functionality tests
    
    # Performance subcategories
    load_test: High load testing
    memory_test: Memory usage testing
    cpu_test: CPU performance testing
    io_test: Disk I/O performance testing
    
    # Security subcategories
    input_validation: Input validation security
    sql_injection: SQL injection tests
    xss: Cross-site scripting tests
    auth: Authentication/authorization tests
    
    # Environment specific
    requires_gpu: Tests requiring GPU
    requires_docker: Tests requiring Docker
    requires_internet: Tests requiring internet connection
    local_only: Tests that run only locally

# Test timeout (prevent hanging tests)
timeout = 300
timeout_method = thread

# Asyncio configuration
asyncio_mode = auto

# Hypothesis configuration for property-based testing
hypothesis_deadline = 10000
hypothesis_max_examples = 100
hypothesis_verbosity = normal
hypothesis_print_blob = true

# Note: plugins are loaded automatically, no explicit declaration needed

# Test collection
collect_ignore = 
    setup.py
    build
    dist
    .git
    .pytest_cache
    node_modules
    __pycache__

# Minimum Python version
minversion = 6.0

# Test selection shortcuts
# Run fast tests only: pytest -m "not slow"  
# Run security tests: pytest -m security
# Run performance tests: pytest -m performance
# Run unit tests only: pytest -m "unit and not slow"
# Run integration tests: pytest -m integration
# Run TUI tests: pytest -m tui

# Filter warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::pytest.PytestUnraisableExceptionWarning
    
# Logging configuration
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# JUnit XML for CI/CD
junit_family = xunit2
junit_suite_name = claude-tiu-tests

# Test ordering preference
# Order: smoke -> unit -> integration -> api -> tui -> validation -> security -> performance

# Coverage configuration
# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */env/*
    */build/*
    */dist/*
    */migrations/*
    */conftest.py
    */setup.py
    */main.py
    
branch = true
parallel = true
concurrency = multiprocessing,thread

[coverage:report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true

exclude_lines =
    pragma: no cover
    pragma: nocover
    def __repr__
    def __str__
    if self.debug:
    if settings.DEBUG
    if TYPE_CHECKING:
    raise AssertionError
    raise NotImplementedError
    raise ValueError("Should not reach here")
    if 0:
    if False:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    @overload
    
# Exclude partial branches
partial_branches =
    pragma: no branch
    if TYPE_CHECKING:
    if not TYPE_CHECKING:
    
[coverage:html]
directory = htmlcov
title = claude-tiu Test Coverage Report

[coverage:xml]
output = coverage.xml

[coverage:json]
output = coverage.json
pretty_print = true

# Coverage thresholds by module
[coverage:report:requirements]
# Core modules - high coverage required
src/core/*.py = 90
src/services/*.py = 85
src/security/*.py = 95

# API modules - medium-high coverage
src/api/*.py = 80
src/database/*.py = 85

# UI modules - medium coverage (harder to test)
src/ui/*.py = 70

# Integration modules - medium coverage
src/integrations/*.py = 75