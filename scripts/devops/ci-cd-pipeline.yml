# CI/CD Pipeline for Claude-TUI and MCP Server\n# Automation Engineer Implementation\n\nname: Claude-TUI CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop, 'release/*' ]\n  pull_request:\n    branches: [ main, develop ]\n  schedule:\n    - cron: '0 6 * * *'  # Daily security scan\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n  NODE_VERSION: '18'\n  PYTHON_VERSION: '3.11'\n\njobs:\n  # Security and Vulnerability Scanning\n  security-scan:\n    name: Security Scan\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n      contents: read\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Run Trivy vulnerability scanner\n      uses: aquasecurity/trivy-action@master\n      with:\n        scan-type: 'fs'\n        scan-ref: '.'\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n    \n    - name: Upload Trivy scan results\n      uses: github/codeql-action/upload-sarif@v3\n      if: always()\n      with:\n        sarif_file: 'trivy-results.sarif'\n    \n    - name: Dependency vulnerability scan\n      run: |\n        pip install safety\n        safety check --json || true\n        \n        if command -v npm &> /dev/null; then\n          npm audit --audit-level moderate || true\n        fi\n\n  # Quality Assurance and Testing\n  test-suite:\n    name: Comprehensive Testing\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.10', '3.11', '3.12']\n    \n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: claude_tui_test\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n      \n      redis:\n        image: redis:7-alpine\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v5\n      with:\n        python-version: ${{ matrix.python-version }}\n        cache: 'pip'\n    \n    - name: Set up Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n        cache-dependency-path: 'mcp-server/package-lock.json'\n    \n    - name: Install Python dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install -r requirements-dev.txt\n    \n    - name: Install Node.js dependencies\n      working-directory: ./mcp-server\n      run: npm ci\n    \n    - name: Set up test environment\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claude_tui_test\n        REDIS_URL: redis://localhost:6379\n        CLAUDE_TUI_ENV: test\n      run: |\n        python scripts/init_database.py\n    \n    - name: Run Python tests with coverage\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claude_tui_test\n        REDIS_URL: redis://localhost:6379\n        CLAUDE_TUI_ENV: test\n      run: |\n        python -m pytest tests/ \\\n          --cov=src/ \\\n          --cov-report=xml \\\n          --cov-report=html \\\n          --cov-fail-under=80 \\\n          --maxfail=5 \\\n          --durations=10 \\\n          -v\n    \n    - name: Run Node.js tests\n      working-directory: ./mcp-server\n      run: |\n        npm test -- --coverage --watchAll=false\n    \n    - name: Run integration tests\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claude_tui_test\n        REDIS_URL: redis://localhost:6379\n        CLAUDE_TUI_ENV: test\n      run: |\n        python -m pytest tests/integration/ -v --maxfail=3\n    \n    - name: Run performance tests\n      run: |\n        python scripts/performance/benchmark_api.py\n        python scripts/performance/profile_api.py\n    \n    - name: Upload coverage reports\n      uses: codecov/codecov-action@v4\n      with:\n        file: ./coverage.xml\n        flags: unittests\n        name: codecov-umbrella\n    \n    - name: Archive test results\n      uses: actions/upload-artifact@v4\n      if: always()\n      with:\n        name: test-results-${{ matrix.python-version }}\n        path: |\n          htmlcov/\n          pytest-report.html\n          coverage.xml\n\n  # Build and Package\n  build:\n    name: Build Applications\n    needs: [security-scan, test-suite]\n    runs-on: ubuntu-latest\n    \n    outputs:\n      image-digest: ${{ steps.build-main.outputs.digest }}\n      mcp-image-digest: ${{ steps.build-mcp.outputs.digest }}\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v3\n    \n    - name: Log in to Container Registry\n      uses: docker/login-action@v3\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n    \n    - name: Extract metadata (tags, labels)\n      id: meta-main\n      uses: docker/metadata-action@v5\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=sha,prefix={{branch}}-\n          type=raw,value=latest,enable={{is_default_branch}}\n    \n    - name: Extract MCP metadata\n      id: meta-mcp\n      uses: docker/metadata-action@v5\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mcp\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=sha,prefix={{branch}}-\n          type=raw,value=latest,enable={{is_default_branch}}\n    \n    - name: Build and push main application\n      id: build-main\n      uses: docker/build-push-action@v5\n      with:\n        context: .\n        file: ./Dockerfile\n        target: production\n        push: true\n        tags: ${{ steps.meta-main.outputs.tags }}\n        labels: ${{ steps.meta-main.outputs.labels }}\n        platforms: linux/amd64,linux/arm64\n        cache-from: type=gha\n        cache-to: type=gha,mode=max\n        build-args: |\n          BUILDTIME=${{ fromJSON(steps.meta-main.outputs.json).labels['org.opencontainers.image.created'] }}\n          VERSION=${{ fromJSON(steps.meta-main.outputs.json).labels['org.opencontainers.image.version'] }}\n          REVISION=${{ fromJSON(steps.meta-main.outputs.json).labels['org.opencontainers.image.revision'] }}\n    \n    - name: Build and push MCP server\n      id: build-mcp\n      uses: docker/build-push-action@v5\n      with:\n        context: ./mcp-server\n        file: ./mcp-server/Dockerfile\n        push: true\n        tags: ${{ steps.meta-mcp.outputs.tags }}\n        labels: ${{ steps.meta-mcp.outputs.labels }}\n        platforms: linux/amd64,linux/arm64\n        cache-from: type=gha\n        cache-to: type=gha,mode=max\n    \n    - name: Run container security scan\n      uses: aquasecurity/trivy-action@master\n      with:\n        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\n        format: 'sarif'\n        output: 'container-scan-results.sarif'\n    \n    - name: Upload container scan results\n      uses: github/codeql-action/upload-sarif@v3\n      if: always()\n      with:\n        sarif_file: 'container-scan-results.sarif'\n\n  # Staging Deployment\n  deploy-staging:\n    name: Deploy to Staging\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/develop'\n    environment:\n      name: staging\n      url: https://staging.claude-tui.dev\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Configure kubectl\n      uses: azure/k8s-set-context@v3\n      with:\n        method: kubeconfig\n        kubeconfig: ${{ secrets.KUBECONFIG_STAGING }}\n    \n    - name: Deploy to staging\n      run: |\n        # Update image in deployment\n        kubectl set image deployment/claude-tui-app \\\n          claude-tui=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop \\\n          -n staging\n        \n        kubectl set image deployment/claude-tui-mcp \\\n          mcp-server=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mcp:develop \\\n          -n staging\n        \n        # Wait for rollout\n        kubectl rollout status deployment/claude-tui-app -n staging --timeout=600s\n        kubectl rollout status deployment/claude-tui-mcp -n staging --timeout=600s\n    \n    - name: Run smoke tests\n      run: |\n        chmod +x scripts/devops/smoke-tests.sh\n        ENVIRONMENT=staging ./scripts/devops/smoke-tests.sh\n    \n    - name: Performance regression test\n      run: |\n        python scripts/check_performance_regression.py \\\n          --baseline-file performance_baseline.json \\\n          --target-url https://staging.claude-tui.dev\n\n  # Production Deployment\n  deploy-production:\n    name: Deploy to Production\n    needs: [build, deploy-staging]\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    environment:\n      name: production\n      url: https://claude-tui.dev\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Configure kubectl\n      uses: azure/k8s-set-context@v3\n      with:\n        method: kubeconfig\n        kubeconfig: ${{ secrets.KUBECONFIG_PRODUCTION }}\n    \n    - name: Blue-Green Deployment\n      run: |\n        chmod +x scripts/devops/deploy-production.sh\n        ./scripts/devops/deploy-production.sh \\\n          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \\\n          --strategy blue-green \\\n          --timeout 1800\n    \n    - name: Post-deployment verification\n      run: |\n        # Health checks\n        for i in {1..10}; do\n          if curl -f https://claude-tui.dev/health; then\n            echo \"✅ Health check $i passed\"\n            break\n          else\n            echo \"❌ Health check $i failed\"\n            sleep 30\n          fi\n        done\n        \n        # Performance validation\n        python scripts/production_validation.py \\\n          --url https://claude-tui.dev \\\n          --threshold-response-time 2000 \\\n          --threshold-error-rate 0.01\n    \n    - name: Update GitHub deployment status\n      uses: actions/github-script@v7\n      with:\n        script: |\n          await github.rest.repos.createDeployment({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            ref: context.sha,\n            environment: 'production',\n            description: 'Deployed via GitHub Actions',\n            auto_merge: false\n          });\n\n  # Rollback Job (Manual Trigger)\n  rollback-production:\n    name: Rollback Production\n    runs-on: ubuntu-latest\n    if: github.event_name == 'workflow_dispatch'\n    environment:\n      name: production\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Configure kubectl\n      uses: azure/k8s-set-context@v3\n      with:\n        method: kubeconfig\n        kubeconfig: ${{ secrets.KUBECONFIG_PRODUCTION }}\n    \n    - name: Rollback deployment\n      run: |\n        kubectl rollout undo deployment/claude-tui-app -n production\n        kubectl rollout undo deployment/claude-tui-mcp -n production\n        \n        kubectl rollout status deployment/claude-tui-app -n production --timeout=600s\n        kubectl rollout status deployment/claude-tui-mcp -n production --timeout=600s\n    \n    - name: Verify rollback\n      run: |\n        sleep 60\n        curl -f https://claude-tui.dev/health || exit 1\n        echo \"✅ Rollback successful\"\n\n  # Monitoring and Alerts Setup\n  setup-monitoring:\n    name: Setup Monitoring\n    needs: deploy-production\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Update monitoring dashboards\n      run: |\n        # Update Grafana dashboards\n        curl -X POST \\\n          -H \"Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}\" \\\n          -H \"Content-Type: application/json\" \\\n          -d @config/monitoring/grafana/dashboards/claude-tui-overview.json \\\n          https://grafana.claude-tui.dev/api/dashboards/db\n    \n    - name: Update alert rules\n      run: |\n        # Update Prometheus alert rules\n        kubectl apply -f config/monitoring/rules/claude-tui-alerts.yml -n monitoring\n    \n    - name: Test alerting\n      run: |\n        # Send test alert to verify alerting pipeline\n        curl -X POST \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\n            \"alerts\": [{\n              \"labels\": {\n                \"alertname\": \"TestAlert\",\n                \"service\": \"claude-tui\",\n                \"severity\": \"info\"\n              },\n              \"annotations\": {\n                \"summary\": \"CI/CD Pipeline Test Alert\",\n                \"description\": \"This is a test alert from the CI/CD pipeline\"\n              }\n            }]\n          }' \\\n          https://alertmanager.claude-tui.dev/api/v1/alerts\n\n  # Cleanup and Maintenance\n  cleanup:\n    name: Cleanup Old Resources\n    runs-on: ubuntu-latest\n    if: always()\n    \n    steps:\n    - name: Cleanup old container images\n      run: |\n        # Remove images older than 30 days\n        docker image prune -a --filter \"until=720h\" -f || true\n    \n    - name: Cleanup old artifacts\n      uses: actions/github-script@v7\n      with:\n        script: |\n          const artifacts = await github.rest.actions.listArtifactsForRepo({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            per_page: 100\n          });\n          \n          const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n          \n          for (const artifact of artifacts.data.artifacts) {\n            const createdAt = new Date(artifact.created_at);\n            if (createdAt < thirtyDaysAgo) {\n              await github.rest.actions.deleteArtifact({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                artifact_id: artifact.id\n              });\n              console.log(`Deleted artifact: ${artifact.name}`);\n            }\n          }\n\n  # Notification and Reporting\n  notify:\n    name: Notify Deployment Status\n    needs: [deploy-production, setup-monitoring]\n    runs-on: ubuntu-latest\n    if: always() && github.ref == 'refs/heads/main'\n    \n    steps:\n    - name: Notify Slack\n      uses: 8398a7/action-slack@v3\n      if: always()\n      with:\n        status: ${{ job.status }}\n        custom_payload: |\n          {\n            \"text\": \"Claude-TUI Deployment ${{ job.status }}\",\n            \"blocks\": [\n              {\n                \"type\": \"section\",\n                \"text\": {\n                  \"type\": \"mrkdwn\",\n                  \"text\": \"*Claude-TUI Deployment Status: ${{ job.status }}*\\n\\n*Commit:* <${{ github.event.head_commit.url }}|${{ github.event.head_commit.message }}>\\n*Author:* ${{ github.event.head_commit.author.name }}\\n*Environment:* Production\"\n                }\n              },\n              {\n                \"type\": \"actions\",\n                \"elements\": [\n                  {\n                    \"type\": \"button\",\n                    \"text\": {\n                      \"type\": \"plain_text\",\n                      \"text\": \"View Deployment\"\n                    },\n                    \"url\": \"https://claude-tui.dev\"\n                  },\n                  {\n                    \"type\": \"button\",\n                    \"text\": {\n                      \"type\": \"plain_text\",\n                      \"text\": \"View Logs\"\n                    },\n                    \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"\n                  }\n                ]\n              }\n            ]\n          }\n      env:\n        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n    \n    - name: Create deployment summary\n      run: |\n        cat >> $GITHUB_STEP_SUMMARY << EOF\n        # 🚀 Claude-TUI Deployment Summary\n        \n        ## Deployment Details\n        - **Status**: ${{ job.status }}\n        - **Environment**: Production\n        - **Commit**: ${{ github.sha }}\n        - **Author**: ${{ github.actor }}\n        - **Workflow**: ${{ github.workflow }}\n        \n        ## Images Deployed\n        - **Main App**: \\`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\\`\n        - **MCP Server**: \\`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mcp:latest\\`\n        \n        ## Quick Links\n        - [Production App](https://claude-tui.dev)\n        - [Health Check](https://claude-tui.dev/health)\n        - [Monitoring Dashboard](https://grafana.claude-tui.dev)\n        - [Logs](https://grafana.claude-tui.dev/explore)\n        \n        ## Next Steps\n        1. Monitor application health for the next 30 minutes\n        2. Verify all critical user flows are working\n        3. Check monitoring alerts and metrics\n        4. Update documentation if needed\n        EOF\n